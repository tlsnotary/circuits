# pad 256 inputs with zeroes on the RIGHT from the input, then XOR with the padding byte and sha256 the result
# return sha256 state 

6 1296
2 256 256
# inputs:
# msg to hash
# sha256 state from which to resume hashing
1 512
# 256 bits: sha state for inner hash
# 256 bits: sha state for outer hash

1 8 0 [512|>8] getIpadByte.casm
1 8 0 [520|>8] getOpadByte.casm

# we repeat the padding byte 32 times
512 256  [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [0|>256] [528|>256] xor256bits.casm

# the padding (xored with ipad byte) is on the RIGHT from the input. i.e. padding is LSB
# we repeat the padding byte 32 times
768 256  [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [512|>8] [528|>256] [256|>256] [784|>256] sha256.txt

# same for opad
512 256  [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [0|>256] [528|>256] xor256bits.casm

768 256  [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [520|>8] [528|>256] [256|>256] [1040|>256] sha256.txt