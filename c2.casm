# TLS stage 2
# Compute master secret MS
# Output sha256(MS XOR opad) and sha256(MS XOR ipad) for HMAC

# The value of fixed inputs is known in the offline phase

14 3730
2 512 640
# notary inputs
# 256: outer hash state
#  fixed
#  256: output mask
# client inputs
# 256: inner hash state
# 128: p2 = hmac.new(secret, a2+seed, hashlib.sha256).digest()
#  fixed
#  256: output mask

1 512
# all outputs go to the evaluator
# 256: outer hash state (for MS XOR padding) xor-masked by notary
# 256: inner hash state (for MS XOR padding) xor-masked by client

# pad inner hash digest as the last chunk for sha256

2 1 0 0 1152 XOR # 0
1 1 1152 1153 INV # 1

# total length of bits in outer sha256: L == 512+256 == 768 should be the last 64 bits
# 768 in binary is 0000 0011 0000 0000
# to be hashed: 256 bits inner hash digest + 1 + 191 bits of 0 + 48 bits of 0 + 0000 0011 0000 0000
# note that inputs start in lsb position

768 256 [1152*8] 1153 1153 [1152*245] 1153 [512|>256] [0|>256] [1154|>256] sha256.txt

# master secret == [1154|>256] + [768|>128] == p1+p2 (48 bytes)

1 8 0 [1410|>8] getIpadByte.casm
1 8 0 [1418|>8] getOpadByte.casm

# xor the remaining 16 bytes of MS () //TODO need xor128bits.casm
512 256  [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1152*128] [768|>128] [1426|>256] xor256bits.casm

# we repeat the padding byte 32 times
512 256  [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1410|>8] [1154|>256] [1682|>256] xor256bits.casm

# xor the remaining 16 bytes of MS () //TODO need xor128bits.casm
512 256  [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1152*128] [768|>128] [1938|>256] xor256bits.casm

#same for opad
# we repeat the padding byte 32 times
512 256  [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1418|>8] [1154|>256] [2194|>256] xor256bits.casm

2 256 0 1 [2450|>256] getSha256InitialState.casm

#-------10 gates at this point

768 256 [1938|>512] [2450|>256] [2706|>256] sha256.txt #outer
768 256 [1426|>512] [2450|>256] [2962|>256] sha256.txt

512 256 [2706|>256] [256|>256] [3218|>256] xor256bits.casm
512 256 [2962|>256] [896|>256] [3474|>256] xor256bits.casm